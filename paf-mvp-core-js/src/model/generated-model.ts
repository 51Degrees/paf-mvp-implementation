/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * A domain name
 */
export type Domain = string;
export type TransmissionReceiver = Domain;
export type TransmissionContentId = string;
export type TransactionId = string;
/**
 * No parameter expected to call this endpoint
 */
export type Get3PcRequest = null;
/**
 * Number of seconds since UNIX Epoch time (1970/01/01 00:00:00)
 */
export type Timestamp = number;
/**
 * No parameter expected to call this endpoint
 */
export type GetIdentityRequest = null;
/**
 * A version number made of a "major" and a "minor" version numbers.
 *
 * To be detailed.
 */
export type Version = string;
/**
 * The base64 representation of a data signature
 */
export type Signature = string;
export type TransmissionContents = {
  content_id: TransmissionContentId;
  transaction_id: TransactionId;
}[];
/**
 * The details of the status. It can be empty for "success" but it should detail the reason(s) in case of an error.
 */
export type TransmissionDetails = string;
/**
 * List of identifiers
 */
export type Identifiers = Identifier[];
/**
 * Equals "success" if the DSP signed the Transmission and returns it to the sender.<br /> Equals "error_bad_request" if the receiver doesn't understand or see inconsistency in the Transmission Request.<br /> Equals "error_cannot_process" if the receiver failed to use the data of the Transmission Request properly.
 */
export type TransmissionStatus = 'success' | 'error_bad_request' | 'error_cannot_process';
/**
 * The URL that the user should be be redirected to, to provide response data
 */
export type ReturnUrl = string;
/**
 * The response code used on a redirect endpoint<br>While REST endpoints can use HTTP codes to communicate the state of the response, redirect endpoints are limited to `30x` HTTP codes.<br>To address this problem, this property is used to contain the same HTTP code as the one that would be returned by a REST endpoint.
 */
export type ResponseCode = number;

/**
 * ** Please ignore **
 * Only needed to have an entry point for generating all interfaces together
 */
export interface _ {
  'audit-log'?: AuditLog;
  domain?: Domain;
  error?: Error;
  'get-3pc-request'?: Get3PcRequest;
  'get-3pc-response'?: Get3PcResponse;
  'get-identity-request'?: GetIdentityRequest;
  'get-identity-response'?: GetIdentityResponse;
  'get-ids-prefs-request'?: GetIdsPrefsRequest;
  'get-ids-prefs-response'?: GetIdsPrefsResponse;
  'get-new-id-request'?: GetNewIdRequest;
  'get-new-id-response'?: GetNewIdResponse;
  identifier?: Identifier;
  identifiers?: Identifiers;
  'ids-and-optional-preferences'?: IdsAndOptionalPreferences;
  'ids-and-preferences'?: IdsAndPreferences;
  'message-base'?: MessageBase;
  'post-ids-prefs-request'?: PostIdsPrefsRequest;
  'post-ids-prefs-response'?: PostIdsPrefsResponse;
  'post-seed-request'?: PostSeedRequest;
  'post-seed-response'?: PostSeedResponse;
  'post-sign-preferences-request'?: PostSignPreferencesRequest;
  'preferences-data'?: PreferencesData;
  'post-transmission-request-request'?: PostTransmissionRequestRequest;
  'post-transmission-request-response'?: PostTransmissionRequestResponse;
  preferences?: Preferences;
  'redirect-get-ids-prefs-request'?: RedirectGetIdsPrefsRequest;
  'redirect-get-ids-prefs-response'?: RedirectGetIdsPrefsResponse;
  'redirect-post-ids-prefs-request'?: RedirectPostIdsPrefsRequest;
  'redirect-post-ids-prefs-response'?: RedirectPostIdsPrefsResponse;
  'response-code'?: ResponseCode;
  'return-url'?: ReturnUrl;
  seed?: Seed;
  signature?: Signature;
  source?: Source;
  'test-3pc'?: Test3Pc;
  timestamp?: Timestamp;
  'unsigned-preferences'?: UnsignedPreferences;
  transaction_id?: TransactionId;
  'transmission-content_id'?: TransmissionContentId;
  'transmission-contents'?: TransmissionContents;
  'transmission-details'?: TransmissionDetails;
  'transmission-receiver'?: TransmissionReceiver;
  'transmission-request'?: TransmissionRequest;
  'transmission-result'?: TransmissionResult;
  'transmission-status'?: TransmissionStatus;
  version?: Version;
}
/**
 * An Audit Log gathers the necessary data to audit a Transaction (via Transmission) for a given Addressable Content
 */
export interface AuditLog {
  data: IdsAndPreferences;
  seed: Seed;
  transaction_id: TransactionId;
  transmissions: TransmissionResult[];
}
/**
 * The Seed gathers data related to the Addressable Content and sign them.
 */
export interface Seed {
  version: Version;
  transaction_ids: TransactionId[];
  publisher: Domain;
  source: Source;
}
export interface TransmissionResult {
  version: Version;
  receiver: TransmissionReceiver;
  contents: TransmissionContents;
  status: TransmissionStatus;
  details: TransmissionDetails;
  source: Source;
}
/**
 * The description of an error
 */
export interface Error {
  /**
   * The error message
   */
  message: string;
}
/**
 * GET /v1/3pc response
 */
export interface Get3PcResponse {
  '3pc': Test3Pc;
}
/**
 * A cookie temporarily set to test support of 3d party cookies
 */
export interface Test3Pc {
  timestamp: Timestamp;
}
/**
 * GET /v1/identity response
 */
export interface GetIdentityResponse {
  /**
   * The name of the contracting party, since the domain may not reflect the company name.
   *
   */
  name: string;
  /**
   * The type of contracting party in the PAF ecosystem
   */
  type: 'vendor' | 'operator';
  version: Version;
  /**
   * List of public keys the contracting party used or is using for signing data and messages
   */
  keys: {
    /**
     * Public key string value
     */
    key: string;
    start: Timestamp;
    end?: Timestamp;
  }[];
}
/**
 * GET /v1/ids-prefs request
 */
export interface GetIdsPrefsRequest {
  sender: Domain;
  receiver: Domain;
  timestamp: Timestamp;
  signature: Signature;
}
/**
 * GET /v1/ids-prefs response
 */
export interface GetIdsPrefsResponse {
  sender: Domain;
  receiver: Domain;
  timestamp: Timestamp;
  signature: Signature;
  body: IdsAndOptionalPreferences;
}
/**
 * A list of identifiers and optionally, some preferences
 */
export interface IdsAndOptionalPreferences {
  preferences?: Preferences;
  identifiers: Identifier[];
}
/**
 * The current preferences of the user
 */
export interface Preferences {
  version: Version;
  data: PreferencesData;
  source: Source;
}
/**
 * Preferences data
 */
export interface PreferencesData {
  /**
   * Whether the user accepts (`true`) or not (`false`) that their browsing is used for personalization
   */
  use_browsing_for_personalization: boolean;
}
/**
 * Source of data representing what contracting party created and signed the data
 */
export interface Source {
  timestamp: Timestamp;
  domain: Domain;
  signature: Signature;
}
/**
 * A pseudonymous identifier generated for a web user
 */
export interface Identifier {
  version: Version;
  /**
   * The identifier type, identifier of type `paf_browser_id` is mandatory and is "pivot"
   */
  type: 'paf_browser_id';
  /**
   * If set to `false`, means the identifier has not yet been persisted as a cookie.<br>Otherwise, means this identifier is persisted as a PAF cookie<br>(default value = `true` meaning if the property is omitted the identifier *is* persisted)
   */
  persisted?: boolean;
  /**
   * The identifier value
   */
  value: string;
  source: Source;
}
/**
 * GET /v1/new-id request
 */
export interface GetNewIdRequest {
  sender: Domain;
  receiver: Domain;
  timestamp: Timestamp;
  signature: Signature;
}
/**
 * GET /v1/new-id response
 */
export interface GetNewIdResponse {
  sender: Domain;
  receiver: Domain;
  timestamp: Timestamp;
  signature: Signature;
  body: {
    identifiers: Identifier[];
  };
}
/**
 * A list of identifiers and some preferences
 */
export interface IdsAndPreferences {
  preferences: Preferences;
  identifiers: Identifier[];
}
/**
 * The base properties of a request or response to/from an operator
 */
export interface MessageBase {
  sender: Domain;
  receiver: Domain;
  timestamp: Timestamp;
  signature: Signature;
}
/**
 * POST /v1/ids-prefs request
 */
export interface PostIdsPrefsRequest {
  sender: Domain;
  receiver: Domain;
  timestamp: Timestamp;
  signature: Signature;
  body: IdsAndPreferences;
}
/**
 * POST /v1/ids-prefs response
 */
export interface PostIdsPrefsResponse {
  sender: Domain;
  receiver: Domain;
  timestamp: Timestamp;
  signature: Signature;
  body: IdsAndPreferences;
}
/**
 * POST /v1/seed request
 */
export interface PostSeedRequest {
  data: IdsAndPreferences;
  transaction_ids: TransactionId[];
}
/**
 * POST /paf-proxy/v1/seed request
 */
export interface PostSeedResponse {
  version: Version;
  transaction_ids: TransactionId[];
  publisher: Domain;
  source: Source;
}
/**
 * POST /paf-proxy/v1/sign/prefs request
 */
export interface PostSignPreferencesRequest {
  unsignedPreferences: UnsignedPreferences;
  identifiers: Identifiers;
}
/**
 * The current preferences of the user before they are signed
 */
export interface UnsignedPreferences {
  version: Version;
  data: PreferencesData;
}
/**
 * POST /paf-proxy/v1/transmission-request request
 */
export interface PostTransmissionRequestRequest {
  data: IdsAndPreferences;
  seed: Seed;
}
/**
 * POST /paf-proxy/v1/transmission-request request
 */
export interface PostTransmissionRequestResponse {
  version: Version;
  seed: Seed;
  data: IdsAndPreferences;
  receiver: TransmissionReceiver;
  status: TransmissionStatus1;
  details: TransmissionDetails;
  contents: TransmissionContents;
  source: Source;
  /**
   * The list of Transmission Result before this Transmission Request for the given Seed.
   */
  parents: TransmissionResult[];
}
/**
 * GET /v1/redirect/get-ids-prefs request
 */
export interface RedirectGetIdsPrefsRequest {
  returnUrl: ReturnUrl;
  request: GetIdsPrefsRequest;
}
/**
 * GET /v1/redirect/get-ids-prefs response
 */
export interface RedirectGetIdsPrefsResponse {
  code: ResponseCode;
  response?: GetIdsPrefsResponse;
  error?: Error;
}
/**
 * GET /v1/redirect/post-ids-prefs request
 */
export interface RedirectPostIdsPrefsRequest {
  returnUrl: ReturnUrl;
  request: PostIdsPrefsRequest;
}
/**
 * GET /v1/redirect/post-ids-prefs response
 */
export interface RedirectPostIdsPrefsResponse {
  code: ResponseCode;
  response?: PostIdsPrefsResponse;
  error?: Error;
}
/**
 * The request sent from a Sender to a Receiver for sharing PAF data for a set of Addressable Content
 */
export interface TransmissionRequest {
  version: Version;
  seed: Seed;
  data: IdsAndPreferences;
  receiver: TransmissionReceiver;
  status: TransmissionStatus;
  details: TransmissionDetails;
  contents: TransmissionContents;
  source: Source;
  /**
   * The list of Transmission Result before this Transmission Request for the given Seed.
   */
  parents: TransmissionResult[];
}
