{"version":3,"file":"ok-audit.js","sources":["../../../paf-mvp-audit/src/locale.ts","../../../paf-mvp-core-js/src/log.ts","../../../paf-mvp-core-js/src/ui/fields.ts","../../../paf-mvp-audit/src/model.ts","../../../paf-mvp-audit/src/view.ts","../../../paf-mvp-core-js/src/ui/binding.ts","../../../paf-mvp-audit/src/controller.ts","../../../paf-mvp-audit/src/main.ts"],"sourcesContent":["import en_us from './locales/en-us.yaml';\r\nimport en_gb from './locales/en-gb.yaml';\r\nexport class Values {\r\n    constructor() {\r\n        // Audit text\r\n        this.auditHeading = 'NOT SET';\r\n        this.auditFooter = 'NOT SET';\r\n        // Button text\r\n        this.download = 'NOT SET';\r\n        this.cancel = 'NOT SET';\r\n    }\r\n}\r\nexport class Locale extends Values {\r\n    constructor(languages) {\r\n        super();\r\n        /**\r\n         * Logo to use with the templates.\r\n         */\r\n        this.Logo = '';\r\n        // Use US english as the default locale.\r\n        Object.assign(this, en_us);\r\n        // Replace any values with the users chosen locale.\r\n        Object.assign(this, this.getLocale(languages));\r\n        // Extract the arrays into paragraph HTML element strings.\r\n        this.auditBodyHTML = this.toHtml(this.auditBody);\r\n    }\r\n    toHtml(list) {\r\n        return `<p>${list.join('</p><p>')}</p>`;\r\n    }\r\n    getLocale(locales) {\r\n        for (const locale of locales) {\r\n            switch (locale) {\r\n                case 'en-GB':\r\n                    return en_gb;\r\n                case 'en-US':\r\n                    return en_us;\r\n            }\r\n        }\r\n        return en_us;\r\n    }\r\n}\r\n","// Wrappers to console.(log | info | warn | error). Takes N arguments, the same as the native methods\r\nexport class Log {\r\n    constructor(id, color) {\r\n        this.id = id;\r\n        this.color = color;\r\n    }\r\n    Debug(...args) {\r\n        console.log(...this.decorateLog('DEBUG:', args));\r\n    }\r\n    Message(...args) {\r\n        console.log(...this.decorateLog('MESSAGE:', args));\r\n    }\r\n    Info(...args) {\r\n        console.info(...this.decorateLog('INFO:', args));\r\n    }\r\n    Warn(...args) {\r\n        console.warn(...this.decorateLog('WARNING:', args));\r\n    }\r\n    Error(...args) {\r\n        console.error(...this.decorateLog('ERROR:', args));\r\n    }\r\n    decorateLog(prefix, args) {\r\n        const newArgs = [].slice.call(args);\r\n        prefix && newArgs.unshift(prefix);\r\n        newArgs.unshift(Log.label(this.color));\r\n        newArgs.unshift(`%c${this.id}`);\r\n        return newArgs;\r\n    }\r\n}\r\nLog.label = (color) => `display: inline-block; color: #fff; background: ${color}; padding: 1px 4px; border-radius: 3px;`;\r\n","export class FieldReadOnly {\r\n    /**\r\n     * Constructs a new instance of the readonly field for the model.\r\n     * @param model\r\n     */\r\n    constructor(model) {\r\n        // List of bindings to HTML elements for the field.\r\n        this.bindings = [];\r\n        this.model = model;\r\n    }\r\n    /**\r\n     * Binds the elements that are associated with the field to the field so that when the value changes the HTML elements\r\n     * are updated and vice versa.\r\n     */\r\n    bind() {\r\n        this.bindings.forEach((b) => b.bind());\r\n    }\r\n    /**\r\n     * Add a new binding for the field and set the correct value. Sets the binding to this field, and then adds the\r\n     * binding to the list for the field.\r\n     * @param binding\r\n     */\r\n    addBinding(binding) {\r\n        binding.setField(this);\r\n        this.bindings.push(binding);\r\n    }\r\n}\r\n/**\r\n * Field that can be bound to an HTML element.\r\n */\r\nexport class Field extends FieldReadOnly {\r\n    /**\r\n     * The model and default value for the field.\r\n     * @param model\r\n     * @param defaultValue\r\n     */\r\n    constructor(model, defaultValue) {\r\n        super(model);\r\n        this.defaultValue = defaultValue;\r\n        this._value = defaultValue;\r\n    }\r\n    /**\r\n     * Gets the current value.\r\n     */\r\n    get value() {\r\n        return this._value;\r\n    }\r\n    /**\r\n     * Sets the current value, updating any HTML elements that match the name value, then checks to see if any other\r\n     * fields need to be updated if the model is not already in a setting values operation.\r\n     */\r\n    set value(value) {\r\n        this._value = value;\r\n        this.bindings.forEach((b) => b.setValue(value));\r\n        if (this.model.settingValues === false) {\r\n            this.model.settingValues = true;\r\n            this.updateOthers();\r\n            this.model.settingValues = false;\r\n        }\r\n    }\r\n    /**\r\n     * Resets the field to the original value.\r\n     */\r\n    reset() {\r\n        this.value = this.defaultValue;\r\n    }\r\n    /**\r\n     * Add a new binding for the field and set the correct value. Sets the binding to this field, sets the value of the\r\n     * HTML element to the current value of the field, and then adds the binding to the list for the field.\r\n     */\r\n    addBinding(binding) {\r\n        super.addBinding(binding);\r\n        binding.setValue(this._value);\r\n    }\r\n}\r\n","import { Field } from '@core/ui/fields';\r\n/**\r\n * Field represents the transmission result from the audit log.\r\n */\r\nexport class FieldTransmissionResult extends Field {\r\n    updateOthers() {\r\n        // Do nothing.\r\n    }\r\n}\r\n/**\r\n * The model used in the module.\r\n */\r\nexport class Model {\r\n    /**\r\n     * Constructs the data model from the audit log.\r\n     * @param audit\r\n     */\r\n    constructor(audit) {\r\n        // Set to true when model update operations are occurring. Results in the methods to update other properties being\r\n        // disabled.\r\n        this.settingValues = false;\r\n        this.results = [];\r\n        for (let i = 0; i < audit.transmissions.length; i++) {\r\n            this.results.push(new FieldTransmissionResult(this, audit.transmissions[i]));\r\n        }\r\n        this.allFields = this.results;\r\n    }\r\n    /**\r\n     * Calls the bind method on all the fields in the model to connect them to the currently displayed UI.\r\n     */\r\n    bind() {\r\n        this.allFields.forEach((f) => f.bind());\r\n    }\r\n}\r\n","/**\r\n * Resources used by the controller for HTML views and CSS.\r\n * TODO: fix the warning associated with can't find module or type.\r\n */\r\nimport logoSvg from './images/OneKey.svg';\r\nimport css from './css/ok-ui.css';\r\nimport auditTemplate from './views/audit.html';\r\nimport buttonTemplate from './views/button.html';\r\nexport class View {\r\n    /**\r\n     * Constructs a new instance of Controller.\r\n     * @param advert element the module relates to\r\n     * @param locale the language file to use with the UI\r\n     */\r\n    constructor(advert, locale, log) {\r\n        // The shadow root for the UI.\r\n        this.root = null;\r\n        // The outer container for the UI.\r\n        this.outerContainer = null;\r\n        // The container element for the UI, or null if the UI has not yet been added to the DOM.\r\n        this.auditContainer = null;\r\n        this.advert = advert;\r\n        this.log = log;\r\n        // Setup the locale with the text and images to use.\r\n        this.locale = locale;\r\n        this.locale.Logo = logoSvg;\r\n    }\r\n    /**\r\n     * Displays the audit log card ready for the providers to be added.\r\n     */\r\n    display(card) {\r\n        this.setContainerCard(card);\r\n    }\r\n    /**\r\n     * Used to get an array of action elements from the current view.\r\n     * @returns array of HTMLElements that can have events added to them\r\n     */\r\n    getActionElements() {\r\n        const elements = [];\r\n        View.addElements(elements, this.auditContainer.getElementsByTagName('button'));\r\n        View.addElements(elements, this.auditContainer.getElementsByTagName('a'));\r\n        return elements;\r\n    }\r\n    /**\r\n     * Adds element from the other collection to the array.\r\n     * @param array\r\n     * @param other\r\n     */\r\n    static addElements(array, other) {\r\n        for (let i = 0; i < other.length; i++) {\r\n            array.push(other[i]);\r\n        }\r\n    }\r\n    /**\r\n     * Sets the HTML in the container for the template.\r\n     */\r\n    setContainerCard(card) {\r\n        let template;\r\n        switch (card) {\r\n            case 'audit':\r\n                template = auditTemplate;\r\n                break;\r\n            case 'button':\r\n                template = buttonTemplate;\r\n                break;\r\n            default:\r\n                throw `Card '${card}' is not known`;\r\n        }\r\n        this.getContainer().innerHTML = template(this.locale);\r\n    }\r\n    /**\r\n     * Returns the container for the entire UI adding it if it does not already exist.\r\n     * @returns\r\n     */\r\n    getContainer() {\r\n        if (this.auditContainer === null) {\r\n            this.addContainer();\r\n        }\r\n        return this.auditContainer;\r\n    }\r\n    /**\r\n     * Adds the CSS, javascript, and the container div for the UI elements.\r\n     */\r\n    addContainer() {\r\n        // Create an outer container to add the shadow root and UI components to.\r\n        this.outerContainer = this.advert.appendChild(document.createElement('div'));\r\n        // Create the CSS style element.\r\n        const style = document.createElement('style');\r\n        // TODO: Fix CSS include to remove the magic character at the beginning of the CSS file.\r\n        style.innerHTML = css.trim();\r\n        // Create the new container with the pop up template.\r\n        this.auditContainer = document.createElement('div');\r\n        this.auditContainer.classList.add('ok-ui');\r\n        // If the pop up is valid then append the container and store a reference to the pop up element.\r\n        this.root = this.outerContainer.attachShadow({ mode: 'closed' });\r\n        this.root.appendChild(style);\r\n        this.root.appendChild(this.auditContainer);\r\n    }\r\n}\r\n","/**\r\n * Base class used for all binding classes containing common functionality.\r\n */\r\nexport class BindingBase {\r\n    /**\r\n     * Constructs a new field binding the field in the model to an HTML element of the id. i.e. \"model-field\", or\r\n     * \"model-preference\". The id should be unique within the DOM.\r\n     * @param view that will contain the element with the id\r\n     * @param id of the id of the element to bind to\r\n     */\r\n    constructor(view, id) {\r\n        this.view = view;\r\n        this.id = id;\r\n    }\r\n    /**\r\n     * Gets the HTML elements that match the id from the document.\r\n     * @returns first element that matches the id\r\n     */\r\n    getElement() {\r\n        if (this.view.root !== null) {\r\n            return this.view.root.getElementById(this.id);\r\n        }\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * Binding used only to display the value of a field and not update it.\r\n */\r\nexport class BindingViewOnly extends BindingBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        // The field that the binding relates to. Set when the binding is added to the field.\r\n        this.field = null;\r\n    }\r\n    /**\r\n     * Sets the field that the binding is associated with.\r\n     * @param field to associate with the UI element\r\n     */\r\n    setField(field) {\r\n        this.field = field;\r\n    }\r\n}\r\n/**\r\n * Binding used only to display the value of a field and provide a feedback mechanism to update it.\r\n */\r\nexport class BindingReadWrite extends BindingViewOnly {\r\n    // Binds all the elements to the events that matter for the binding.\r\n    bind() {\r\n        const element = this.getElement();\r\n        if (element !== null) {\r\n            this.events.forEach((event) => {\r\n                element.addEventListener(event, () => {\r\n                    if (this.field !== null) {\r\n                        this.field.value = this.getValue(element);\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    }\r\n}\r\n/**\r\n * A boolean field type that is used with an HTMLInputElement and the checked property. Includes support for radio\r\n * options not part of a group and check boxes.\r\n */\r\nexport class BindingChecked extends BindingReadWrite {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.events = ['change'];\r\n    }\r\n    getValue(element) {\r\n        return element.checked;\r\n    }\r\n    setValue(value) {\r\n        const element = super.getElement();\r\n        if (element !== null) {\r\n            element.checked = value;\r\n        }\r\n    }\r\n    bind() {\r\n        if (this.field !== null) {\r\n            this.setValue(this.field.value);\r\n        }\r\n        super.bind();\r\n    }\r\n}\r\nexport class BindingCheckedMap extends BindingReadWrite {\r\n    /**\r\n     * Constructs a new instance of the BindingCheckMap<T> class.\r\n     * @param view that will contain the element with the id\r\n     * @param id of the id of the element to bind to\r\n     * @param trueValue the value of the field that will result in the element being checked\r\n     * @param falseValue the value of the field that will result in the element being unchecked\r\n     */\r\n    constructor(view, id, trueValue, falseValue) {\r\n        super(view, id);\r\n        this.events = ['change'];\r\n        this.trueValue = trueValue;\r\n        this.falseValue = falseValue;\r\n    }\r\n    /**\r\n     * If the element is checked then returns the trueValue, otherwise falseValue.\r\n     * @param element bound to\r\n     * @returns\r\n     */\r\n    getValue(element) {\r\n        return element.checked ? this.trueValue : this.falseValue;\r\n    }\r\n    /**\r\n     * Sets the input checked property to true if the value matches the trueValue otherwise unchecked.\r\n     * @remarks\r\n     * JSON string comparison method is needed for non native types where we want to compare the value for equality\r\n     * rather than the reference to the instance.\r\n     *\r\n     * @param value to use when determine the display state\r\n     */\r\n    setValue(value) {\r\n        const element = super.getElement();\r\n        if (element !== null) {\r\n            element.checked = JSON.stringify(value) === JSON.stringify(this.trueValue);\r\n        }\r\n    }\r\n    bind() {\r\n        if (this.field !== null) {\r\n            this.setValue(this.field.value);\r\n        }\r\n        super.bind();\r\n    }\r\n}\r\n/**\r\n * Binds a field with different values to display HTML. Used to change the contents of div elements and the like based\r\n * on the current state of fields that can have a known number of values.\r\n * @remarks\r\n * The key comparison is performed using JSON.Stringify to compare keys by value.\r\n */\r\nexport class BindingElement extends BindingViewOnly {\r\n    /**\r\n     * Relates any HTML element with the innerHTML property to a map of keys and locale string values.\r\n     * @param view that will contain the element with the id\r\n     * @param id of the id of the element to bind to\r\n     * @param map of field values to locale strings\r\n     */\r\n    constructor(view, id, map) {\r\n        super(view, id);\r\n        this.pairs = Array.from(map);\r\n    }\r\n    setValue(key) {\r\n        const element = super.getElement();\r\n        if (element !== null) {\r\n            const text = this.getString(key);\r\n            if (text !== null) {\r\n                element.innerHTML = text;\r\n            }\r\n            else {\r\n                element.innerHTML = '';\r\n            }\r\n        }\r\n    }\r\n    bind() {\r\n        if (this.field !== null) {\r\n            this.setValue(this.field.value);\r\n        }\r\n    }\r\n    getString(key) {\r\n        const keyJSON = JSON.stringify(key);\r\n        for (const item of this.pairs) {\r\n            if (JSON.stringify(item[0]) === keyJSON) {\r\n                return item[1];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\nexport class BindingButton extends BindingViewOnly {\r\n    setValue(value) {\r\n        const element = super.getElement();\r\n        if (element !== null) {\r\n            element.disabled = value !== true;\r\n        }\r\n    }\r\n    bind() {\r\n        if (this.field !== null) {\r\n            this.setValue(this.field.value);\r\n        }\r\n    }\r\n}\r\n","import { Log } from '@core/log';\r\nimport { Model } from './model';\r\nimport { View } from './view';\r\nimport { BindingViewOnly } from '@core/ui/binding';\r\nimport providerTemplate from './views/provider.html';\r\nimport iconTick from './images/iconTick.svg';\r\n/**\r\n * Logger for the controller.\r\n */\r\nconst log = new Log('audit', '#18a9e1');\r\n/**\r\n * Controller class used with the model and views. Uses paf-lib for data access services.\r\n */\r\nexport class Controller {\r\n    /**\r\n     * Constructs a new instance of Controller and displays the audit popup.\r\n     * @param locale the language file to use with the UI\r\n     * @param advert to bind the audit viewer to\r\n     * @param okUiCtrl instance to use if the settings need to be displayed\r\n     */\r\n    constructor(locale, advert, okUiCtrl) {\r\n        this.locale = locale;\r\n        this.element = advert;\r\n        this.okUiCtrl = okUiCtrl;\r\n        // TODO: Replace this with a fetch for the real audit log once available.\r\n        const auditLog = JSON.parse(advert.getAttribute('auditLog'));\r\n        this.model = new Model(auditLog);\r\n        this.view = new View(advert, locale, log);\r\n        this.mapFieldsToUI();\r\n        this.view.display('button');\r\n        this.bindActions();\r\n        log.Info('Audit registered', advert.id);\r\n    }\r\n    /**\r\n     * Maps the fields in the model to the UI elements that will represent or change them. Must be called before the\r\n     * bind method of the model is called.\r\n     */\r\n    mapFieldsToUI() {\r\n        this.model.results.forEach((r) => r.addBinding(new BindingProviders(this.view, 'ok-ui-providers', this.locale)));\r\n    }\r\n    /**\r\n     * Binds HTML element tags to actions in the controller based on the ids assigned in the views and to the bindings.\r\n     */\r\n    bindActions() {\r\n        this.bindActionElements(this.view.getActionElements(), 'click');\r\n    }\r\n    /**\r\n     * Binds specific HTML elements to the actions.\r\n     * @param elements to have the event provided bound to\r\n     * @param event the name of the event in the addEventListener\r\n     */\r\n    bindActionElements(elements, event) {\r\n        for (let i = 0; i < elements.length; i++) {\r\n            const element = elements[i];\r\n            const action = element.getAttribute('data-action');\r\n            if (action !== null) {\r\n                element.addEventListener(event, (e) => {\r\n                    this.processAction(action);\r\n                    e.preventDefault();\r\n                });\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Processes the action provided, or outputs a warning if the action is not known.\r\n     * @param action the action to perform\r\n     */\r\n    processAction(action) {\r\n        switch (action) {\r\n            case 'settings':\r\n                this.view.display('button');\r\n                this.bindActions();\r\n                this.okUiCtrl.display('settings').catch((e) => log.Error(e));\r\n                break;\r\n            case 'audit':\r\n                this.view.display('audit');\r\n                this.model.bind();\r\n                this.bindActions();\r\n                break;\r\n            case 'close':\r\n                this.view.display('button');\r\n                this.bindActions();\r\n                break;\r\n            case 'download':\r\n                // TODO: Code the action to download the audit log.\r\n                break;\r\n            default:\r\n                log.Warn(`Action '${action}' is not known`);\r\n                break;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Custom UI binding to display the providers from the audit log.\r\n */\r\nclass BindingProviders extends BindingViewOnly {\r\n    constructor(view, id, locale) {\r\n        super(view, id);\r\n        this.locale = locale;\r\n    }\r\n    /**\r\n     * Adds the transmission provider's text to the bound element.\r\n     * @param audit of the audit log\r\n     */\r\n    setValue(result) {\r\n        const container = super.getElement();\r\n        if (container !== null) {\r\n            const item = document.createElement('div');\r\n            item.className = 'ok-ui-provider';\r\n            item.innerHTML = providerTemplate({\r\n                ResultSVG: iconTick,\r\n                Name: result.source.domain,\r\n            });\r\n            container.appendChild(item);\r\n        }\r\n    }\r\n    bind() {\r\n        if (this.field !== null) {\r\n            this.setValue(this.field.value);\r\n        }\r\n    }\r\n}\r\n","import { Locale } from './locale';\r\nimport { Controller } from './controller';\r\nimport { Log } from '@core/log';\r\nconst log = new Log('audit', '#18a9e1');\r\nclass MonitoredElement extends HTMLDivElement {\r\n}\r\nconst uiCtrl = window.PAFUI.controller;\r\ndocument.querySelectorAll('[auditLog]').forEach((e) => {\r\n    if (e instanceof HTMLDivElement) {\r\n        log.Message('register', e.id);\r\n        const content = e.innerHTML;\r\n        e.timer = setInterval(() => {\r\n            log.Message('check', e.id);\r\n            if (content !== e.innerHTML) {\r\n                log.Message('adding', e.id);\r\n                clearInterval(e.timer);\r\n                new Controller(new Locale(window.navigator.languages), e, uiCtrl);\r\n            }\r\n        }, 1000);\r\n    }\r\n});\r\n"],"names":["log"],"mappings":"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"}